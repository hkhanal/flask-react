{"version":3,"file":"bundle.js","sources":["../src/utils/colSpanUtils.ts","../src/utils/domUtils.ts","../src/utils/eventUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/renderMeasuringCells.tsx","../src/utils/selectedCellUtils.ts","../src/style/cell.ts","../src/utils/styleUtils.ts","../src/utils/index.ts","../src/cellRenderers/renderCheckbox.tsx","../src/cellRenderers/renderToggleGroup.tsx","../src/cellRenderers/renderValue.tsx","../src/DataGridDefaultRenderersProvider.ts","../src/cellRenderers/SelectCellFormatter.tsx","../src/hooks/useRowSelection.ts","../src/Columns.tsx","../src/hooks/useCalculatedColumns.ts","../src/hooks/useLayoutEffect.ts","../src/hooks/useColumnWidths.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useLatestFunc.ts","../src/hooks/useRovingTabIndex.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/DragHandle.tsx","../src/EditCell.tsx","../src/renderHeaderCell.tsx","../src/HeaderCell.tsx","../src/style/row.ts","../src/HeaderRow.tsx","../src/Cell.tsx","../src/Row.tsx","../src/ScrollToCell.tsx","../src/sortStatus.tsx","../src/style/core.ts","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/DataGrid.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/TreeDataGrid.tsx","../src/editors/textEditor.tsx"],"sourcesContent":["import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<Element>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n","import type { CellEvent } from '../types';\n\nexport function createCellEvent<E extends React.SyntheticEvent<HTMLDivElement>>(\n  event: E\n): CellEvent<E> {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n\n  return cellEvent;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return (\n      target.closest('.rdg-editor-container')?.querySelectorAll('input, textarea, select')\n        .length === 1\n    );\n  }\n  return false;\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n    <div\n      key={key}\n      className={measuringCellClassname}\n      style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n      data-measuring-cell-key={key}\n    />\n  ));\n}\n","import type { CalculatedColumn, CellNavigationMode, Maybe, Position } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.renderEditCell != null &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n}\n\nfunction getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const minRowIdx = -1 - topSummaryRowsCount;\n  if (rowIdx === minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (topSummaryRows && rowIdx > minRowIdx && rowIdx <= topSummaryRowsCount + minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // Exit the grid if we're at the first or last cell of the grid\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning, layout/paint containment can make cell borders disappear\n     *   https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n     */\n    contain: style;\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  @layer rdg.Cell {\n    box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n  }\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style/cell';\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './eventUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, round, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport type { RenderCheckboxProps } from '../types';\n\nconst checkboxLabel = css`\n  @layer rdg.CheckboxLabel {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    inset: 0;\n    margin-inline-end: 1px; /* align checkbox in row group cell */\n  }\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  @layer rdg.CheckboxInput {\n    all: unset;\n  }\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  @layer rdg.CheckboxIcon {\n    content: '';\n    inline-size: 20px;\n    block-size: 20px;\n    border: 2px solid var(--rdg-border-color);\n    background-color: var(--rdg-background-color);\n\n    .${checkboxInput}:checked + & {\n      background-color: var(--rdg-checkbox-color);\n      outline: 4px solid var(--rdg-background-color);\n      outline-offset: -6px;\n    }\n\n    .${checkboxInput}:focus + & {\n      border-color: var(--rdg-checkbox-focus-color);\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  @layer rdg.CheckboxLabel {\n    cursor: default;\n\n    .${checkbox} {\n      border-color: var(--rdg-checkbox-disabled-border-color);\n      background-color: var(--rdg-checkbox-disabled-background-color);\n    }\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport function renderCheckbox({ onChange, ...props }: RenderCheckboxProps) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label\n      className={clsx(checkboxLabelClassname, {\n        [checkboxLabelDisabledClassname]: props.disabled\n      })}\n    >\n      <input\n        type=\"checkbox\"\n        {...props}\n        className={checkboxInputClassname}\n        onChange={handleChange}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderGroupCellProps } from '../types';\n\nconst groupCellContent = css`\n  @layer rdg.GroupCellContent {\n    outline: none;\n  }\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  @layer rdg.GroupCellCaret {\n    margin-inline-start: 4px;\n    stroke: currentColor;\n    stroke-width: 1.5px;\n    fill: transparent;\n    vertical-align: middle;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function renderToggleGroup<R, SR>(props: RenderGroupCellProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  tabIndex,\n  toggleGroup\n}: RenderGroupCellProps<R, SR>) {\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span className={groupCellContentClassname} tabIndex={tabIndex} onKeyDown={handleKeyDown}>\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import type { RenderCellProps } from '../types';\n\nexport function renderValue<R, SR>(props: RenderCellProps<R, SR>) {\n  try {\n    return props.row[props.column.key as keyof R] as React.ReactNode;\n  } catch {\n    return null;\n  }\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Maybe, Renderers } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultRenderersContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\n\nexport function useDefaultRenderers<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultRenderersContext);\n}\n","import type { RenderCheckboxProps } from '../types';\nimport { useDefaultRenderers } from '../DataGridDefaultRenderersProvider';\n\ntype SharedInputProps = Pick<\n  RenderCheckboxProps,\n  'disabled' | 'tabIndex' | 'aria-label' | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const renderCheckbox = useDefaultRenderers()!.renderCheckbox!;\n\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\n","import { createContext, useContext } from 'react';\n\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, RenderCellProps, RenderGroupCellProps, RenderHeaderCellProps } from './types';\nimport { SelectCellFormatter } from './cellRenderers';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction HeaderRenderer(props: RenderHeaderCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select All\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'HEADER', checked });\n      }}\n    />\n  );\n}\n\nfunction SelectFormatter(props: RenderCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: RenderGroupCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return <HeaderRenderer {...props} />;\n  },\n  renderCell(props) {\n    return <SelectFormatter {...props} />;\n  },\n  renderGroupCell(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import { useMemo } from 'react';\n\nimport { clampColumnWidth, max, min } from '../utils';\nimport type { CalculatedColumn, Column } from '../types';\nimport { renderValue } from '../cellRenderers';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport type { DataGridProps } from '../DataGrid';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  viewportWidth: number;\n  scrollLeft: number;\n  measuredColumnWidths: ReadonlyMap<string, number>;\n  resizedColumnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  measuredColumnWidths,\n  resizedColumnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultFormatter = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n  } => {\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const frozen = rawColumn.frozen ?? false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        width: rawColumn.width ?? defaultWidth,\n        minWidth: rawColumn.minWidth ?? defaultMinWidth,\n        maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        renderCell: rawColumn.renderCell ?? defaultFormatter\n      };\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort frozen columns second:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultFormatter,\n    defaultResizable,\n    defaultSortable\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width =\n        resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width;\n\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {};\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [measuredColumnWidths, resizedColumnWidths, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  };\n}\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport type { CalculatedColumn, StateSetter } from '../types';\nimport { useLayoutEffect } from './useLayoutEffect';\nimport type { DataGridProps } from '../DataGrid';\n\nexport function useColumnWidths<R, SR>(\n  columns: readonly CalculatedColumn<R, SR>[],\n  viewportColumns: readonly CalculatedColumn<R, SR>[],\n  templateColumns: readonly string[],\n  gridRef: React.RefObject<HTMLDivElement>,\n  gridWidth: number,\n  resizedColumnWidths: ReadonlyMap<string, number>,\n  measuredColumnWidths: ReadonlyMap<string, number>,\n  setResizedColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  setMeasuredColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  onColumnResize: DataGridProps<R, SR>['onColumnResize']\n) {\n  const prevGridWidthRef = useRef(gridWidth);\n  const columnsCanFlex: boolean = columns.length === viewportColumns.length;\n  // Allow columns to flex again when...\n  const ignorePreviouslyMeasuredColumns: boolean =\n    // there is enough space for columns to flex and the grid was resized\n    columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure: string[] = [];\n\n  for (const { key, idx, width } of viewportColumns) {\n    if (\n      typeof width === 'string' &&\n      (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) &&\n      !resizedColumnWidths.has(key)\n    ) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n\n  useLayoutEffect(() => {\n    prevGridWidthRef.current = gridWidth;\n    updateMeasuredWidths(columnsToMeasure);\n  });\n\n  function updateMeasuredWidths(columnsToMeasure: readonly string[]) {\n    if (columnsToMeasure.length === 0) return;\n\n    setMeasuredColumnWidths((measuredColumnWidths) => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n  }\n\n  function handleColumnResize(column: CalculatedColumn<R, SR>, nextWidth: number | 'max-content') {\n    const { key: resizingKey } = column;\n    const newTemplateColumns = [...templateColumns];\n    const columnsToMeasure: string[] = [];\n\n    for (const { key, idx, width } of viewportColumns) {\n      if (resizingKey === key) {\n        const width = typeof nextWidth === 'number' ? `${nextWidth}px` : nextWidth;\n        newTemplateColumns[idx] = width;\n      } else if (columnsCanFlex && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n        newTemplateColumns[idx] = width;\n        columnsToMeasure.push(key);\n      }\n    }\n\n    gridRef.current!.style.gridTemplateColumns = newTemplateColumns.join(' ');\n    const measuredWidth =\n      typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey)!;\n\n    // TODO: remove\n    // need flushSync to keep frozen column offsets in sync\n    // we may be able to use `startTransition` or even `requestIdleCallback` instead\n    flushSync(() => {\n      setResizedColumnWidths((resizedColumnWidths) => {\n        const newResizedColumnWidths = new Map(resizedColumnWidths);\n        newResizedColumnWidths.set(resizingKey, measuredWidth);\n        return newResizedColumnWidths;\n      });\n      updateMeasuredWidths(columnsToMeasure);\n    });\n\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  } as const;\n}\n\nfunction measureColumnWidth(gridRef: React.RefObject<HTMLDivElement>, key: string) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current!.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\n","import { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions() {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - offsetHeight + clientHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      // we use flushSync here to avoid flashing scrollbars\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n      });\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize] as const;\n}\n","import { useCallback, useEffect, useRef } from 'react';\n\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { useState } from 'react';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingTabIndex(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\n\nimport { floor, max, min } from '../utils';\n\ninterface ViewportRowsArgs<R> {\n  rows: readonly R[];\n  rowHeight: number | ((row: R) => number);\n  clientHeight: number;\n  scrollTop: number;\n  enableVirtualization: boolean;\n}\n\nexport function useViewportRows<R>({\n  rows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row) => {\n      const currentRowHeight = rowHeight(row);\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    cursor: move;\n    position: absolute;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 8px;\n    block-size: 8px;\n    background-color: var(--rdg-selection-color);\n\n    &:hover {\n      inline-size: 16px;\n      block-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, onEditorNavigation } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellRendererProps,\n  EditCellKeyDownArgs,\n  Maybe,\n  Omit,\n  RenderEditCellProps\n} from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<RenderEditCellProps<R, SR>, 'onRowChange' | 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  rowIdx: number;\n  onRowChange: (row: R, commitChanges: boolean, shouldFocusCell: boolean) => void;\n  closeEditor: (shouldFocusCell: boolean) => void;\n  navigate: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown: Maybe<(args: EditCellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown(\n        {\n          mode: 'EDIT',\n          row,\n          column,\n          rowIdx,\n          navigate() {\n            navigate(event);\n          },\n          onClose\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (event.key === 'Escape') {\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n\n  function onEditorRowChange(row: R, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.displayCellContent && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={handleKeyDown}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {column.renderEditCell != null && (\n        <>\n          {column.renderEditCell({\n            column,\n            row,\n            onRowChange: onEditorRowChange,\n            onClose\n          })}\n          {column.editorOptions?.displayCellContent &&\n            column.renderCell({\n              column,\n              row,\n              isCellEditable: true,\n              tabIndex: -1,\n              onRowChange: onEditorRowChange\n            })}\n        </>\n      )}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderHeaderCellProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\n\nconst headerSortCell = css`\n  @layer rdg.SortableHeaderCell {\n    cursor: pointer;\n    display: flex;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function renderHeaderCell<R, SR>({\n  column,\n  sortDirection,\n  priority,\n  onSort,\n  tabIndex\n}: RenderHeaderCellProps<R, SR>) {\n  if (!column.sortable) return column.name;\n\n  return (\n    <SortableHeaderCell\n      onSort={onSort}\n      sortDirection={sortDirection}\n      priority={priority}\n      tabIndex={tabIndex}\n    >\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  RenderHeaderCellProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'tabIndex'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  tabIndex\n}: SortableHeaderCellProps<R, SR>) {\n  const renderSortStatus = useDefaultRenderers<R, SR>()!.renderSortStatus!;\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{renderSortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { clampColumnWidth, getCellClassname, getCellStyle } from './utils';\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultRenderHeaderCell from './renderHeaderCell';\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n\n    &::after {\n      content: '';\n      cursor: col-resize;\n      position: absolute;\n      inset-block-start: 0;\n      inset-inline-end: 0;\n      inset-block-end: 0;\n      inline-size: 10px;\n    }\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderCellProps<R, SR>) {\n  const isRtl = direction === 'rtl';\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  const renderHeaderCell = column.renderHeaderCell ?? defaultRenderHeaderCell;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right, left } = currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      // prevents text selection in Chrome, which fixes scrolling the grid while dragging, and fixes re-size on an autosized column\n      event.preventDefault();\n      const { right, left } = currentTarget.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function onDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    const { right, left } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    onColumnResize(column, 'max-content');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onDoubleClick={column.resizable ? onDoubleClick : undefined}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {renderHeaderCell({\n        column,\n        sortDirection,\n        priority,\n        onSort,\n        tabIndex: childTabIndex\n      })}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    line-height: var(--rdg-row-height);\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      height: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, Direction } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport HeaderCell from './HeaderCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowSelectedClassname } from './style/row';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    line-height: var(--rdg-header-row-height);\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 1 to show up above regular cells and the focus sink */\n      z-index: 2;\n      position: sticky;\n      inset-block-start: 0;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n      style={getRowStyle(1)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\n\nconst cellCopied = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n\n    &.${cellCopied} {\n      background-color: #9999ff;\n    }\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  rowIdx,\n  dragHandle,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n  const isEditable = isCellEditable(column, row);\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ rowIdx, idx: column.idx }, openEditor);\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleContextMenu(event: React.MouseEvent<HTMLDivElement>) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isEditable || undefined}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {column.renderCell({\n        column,\n        row,\n        isCellEditable: isEditable,\n        tabIndex: childTabIndex,\n        onRowChange: handleRowChange\n      })}\n      {dragHandle}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { forwardRef, memo, type RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, RenderRowProps } from './types';\nimport Cell from './Cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RenderRowProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row, rowIdx),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          rowIdx={rowIdx}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onClick={onCellClick}\n          onDoubleClick={onCellDoubleClick}\n          onContextMenu={onCellContextMenu}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RenderRowProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRenderRow<R, SR>(key: React.Key, props: RenderRowProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { useRef } from 'react';\n\nimport { useLayoutEffect } from './hooks';\nimport { scrollIntoView } from './utils';\n\nexport interface PartialPosition {\n  readonly idx?: number | undefined;\n  readonly rowIdx?: number | undefined;\n}\n\nexport default function ScrollToCell({\n  scrollToPosition: { idx, rowIdx },\n  gridElement,\n  setScrollToCellPosition\n}: {\n  scrollToPosition: PartialPosition;\n  gridElement: HTMLDivElement;\n  setScrollToCellPosition: (cell: null) => void;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // scroll until the cell is completely visible\n    // this is needed if the grid has auto-sized columns\n    scrollIntoView(ref.current);\n  });\n\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridElement,\n      threshold: 1.0\n    });\n\n    observer.observe(ref.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridElement, setScrollToCellPosition]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        gridColumn: idx === undefined ? '1/-1' : idx + 1,\n        gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n      }}\n    />\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderSortIconProps, RenderSortPriorityProps, RenderSortStatusProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function renderSortStatus({ sortDirection, priority }: RenderSortStatusProps) {\n  return (\n    <>\n      {renderSortIcon({ sortDirection })}\n      {renderSortPriority({ priority })}\n    </>\n  );\n}\n\nexport function renderSortIcon({ sortDirection }: RenderSortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function renderSortPriority({ priority }: RenderSortPriorityProps) {\n  return priority;\n}\n","import { css } from '@linaria/core';\n\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  @layer rdg {\n    @layer Defaults,\n      FocusSink,\n      CheckboxInput,\n      CheckboxIcon,\n      CheckboxLabel,\n      Cell,\n      HeaderCell,\n      SummaryCell,\n      EditCell,\n      Row,\n      HeaderRow,\n      SummaryRow,\n      GroupedRow,\n      Root;\n\n    @layer Defaults {\n      *,\n      *::before,\n      *::after {\n        box-sizing: inherit;\n      }\n    }\n\n    @layer Root {\n      ${lightTheme}\n      --rdg-selection-color: #66afe9;\n      --rdg-font-size: 14px;\n\n      display: grid;\n\n      color-scheme: var(--rdg-color-scheme, light dark);\n\n      /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n      /* We set a stacking context so internal elements don't render on top of external elements. */\n      /* size containment is not used as it could break \"width: min-content\" for example, and the grid would infinitely resize on Chromium browsers */\n      contain: content;\n      content-visibility: auto;\n      block-size: 350px;\n      border: 1px solid var(--rdg-border-color);\n      box-sizing: border-box;\n      overflow: auto;\n      background-color: var(--rdg-background-color);\n      color: var(--rdg-color);\n      font-size: var(--rdg-font-size);\n\n      /* needed on Firefox */\n      &::before {\n        content: '';\n        grid-column: 1/-1;\n        grid-row: 1/-1;\n      }\n\n      &.rdg-dark {\n        --rdg-color-scheme: dark;\n        ${darkTheme}\n      }\n\n      &.rdg-light {\n        --rdg-color-scheme: light;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        &:not(.rdg-light) {\n          ${darkTheme}\n        }\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 1 to show up above regular frozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const focusSinkHeaderAndSummaryClassname = css`\n  @layer rdg.FocusSink {\n    /* Should have a higher value than 3 to show up above header and summary rows */\n    z-index: 3;\n  }\n`;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CellRendererProps } from './types';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<\n  CellRendererProps<R, SR>,\n  'rowIdx' | 'column' | 'colSpan' | 'isCellSelected' | 'selectCell'\n>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell({ rowIdx, idx: column.idx });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.renderSummaryCell?.({ column, row, tabIndex: childTabIndex })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { RenderRowProps } from './types';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\nimport SummaryCell from './SummaryCell';\n\ntype SharedRenderRowProps<R, SR> = Pick<\n  RenderRowProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart' | 'selectCell'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRenderRowProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  isTop: boolean;\n  showBorder: boolean;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    line-height: var(--rdg-summary-row-height);\n\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 2;\n    }\n\n    > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nexport const topSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-end: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nexport const bottomSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-start: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nconst topSummaryRowClassname = `rdg-top-summary-row ${topSummaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  showBorder,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [topSummaryRowClassname]: isTop,\n          [topSummaryRowBorderClassname]: isTop && showBorder,\n          [bottomSummaryRowBorderClassname]: !isTop && showBorder,\n          'rdg-bottom-summary-row': !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { forwardRef, useCallback, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport type { Key, KeyboardEvent, RefAttributes } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  RowSelectionChangeProvider,\n  RowSelectionProvider,\n  useCalculatedColumns,\n  useColumnWidths,\n  useGridDimensions,\n  useLatestFunc,\n  useLayoutEffect,\n  useViewportColumns,\n  useViewportRows\n} from './hooks';\nimport {\n  abs,\n  assertIsValidKeyGetter,\n  canExitGrid,\n  createCellEvent,\n  getColSpan,\n  getNextSelectedCellPosition,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  isSelectedCellEditable,\n  renderMeasuringCells,\n  scrollIntoView,\n  sign\n} from './utils';\nimport type {\n  CalculatedColumn,\n  CellClickArgs,\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  CellMouseEvent,\n  CellNavigationMode,\n  Column,\n  CopyEvent,\n  Direction,\n  FillEvent,\n  Maybe,\n  PasteEvent,\n  Position,\n  Renderers,\n  RowsChangeData,\n  SelectRowEvent,\n  SortColumn\n} from './types';\nimport { renderCheckbox as defaultRenderCheckbox } from './cellRenderers';\nimport {\n  DataGridDefaultRenderersProvider,\n  useDefaultRenderers\n} from './DataGridDefaultRenderersProvider';\nimport DragHandle from './DragHandle';\nimport EditCell from './EditCell';\nimport HeaderRow from './HeaderRow';\nimport { defaultRenderRow } from './Row';\nimport type { PartialPosition } from './ScrollToCell';\nimport ScrollToCell from './ScrollToCell';\nimport { default as defaultRenderSortStatus } from './sortStatus';\nimport {\n  focusSinkClassname,\n  focusSinkHeaderAndSummaryClassname,\n  rootClassname,\n  viewportDraggingClassname\n} from './style/core';\nimport { rowSelected, rowSelectedWithFrozenCell } from './style/row';\nimport SummaryRow from './SummaryRow';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'renderCell' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable'\n>;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToCell: (position: PartialPosition) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  | 'role'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'aria-rowcount'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((row: R) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a cell is clicked */\n  onCellClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is double clicked */\n  onCellDoubleClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is right clicked */\n  onCellContextMenu?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  onCellKeyDown?: Maybe<(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<R, SR>>;\n  rowClass?: Maybe<(row: R, rowIdx: number) => Maybe<string>>;\n  /** @default 'ltr' */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  props: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const {\n    // Grid and data Props\n    columns: rawColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    // Event props\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    // ARIA\n    role: rawRole,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'aria-rowcount': rawAriaRowCount,\n    'data-testid': testId\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const role = rawRole ?? 'grid';\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderSortStatus =\n    renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? defaultRenderSortStatus;\n  const renderCheckbox =\n    renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? defaultRenderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  const headerRowsCount = 1;\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [selectedPosition, setSelectedPosition] = useState(\n    (): SelectCellState | EditCellState<R> => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState<PartialPosition | null>(null);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n  const shouldFocusCellRef = useRef(false);\n\n  /**\n   * computed values\n   */\n  const isTreeGrid = role === 'treegrid';\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const ariaRowCount = rawAriaRowCount ?? headerRowsCount + rows.length + summaryRowsCount;\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      renderCheckbox,\n      renderSortStatus\n    }),\n    [renderCheckbox, renderSortStatus]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  } = useCalculatedColumns({\n    rawColumns,\n    measuredColumnWidths,\n    resizedColumnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rows,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows\n  });\n\n  const { gridTemplateColumns, handleColumnResize } = useColumnWidths(\n    columns,\n    viewportColumns,\n    templateColumns,\n    gridRef,\n    gridWidth,\n    resizedColumnWidths,\n    measuredColumnWidths,\n    setResizedColumnWidths,\n    setMeasuredColumnWidths,\n    onColumnResize\n  );\n\n  const minColIdx = isTreeGrid ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: minRowIdx, idx });\n  });\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    if (selectedPosition.idx === -1) {\n      focusSinkRef.current!.focus({ preventScroll: true });\n      scrollIntoView(focusSinkRef.current);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (!shouldFocusCellRef.current) return;\n    shouldFocusCellRef.current = false;\n    const cell = getCellToScroll(gridRef.current!);\n    if (cell === null) return;\n\n    scrollIntoView(cell);\n    // Focus cell content when available instead of the cell itself\n    const elementToFocus = cell.querySelector<Element & HTMLOrSVGElement>('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({ preventScroll: true });\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({ idx, rowIdx }) {\n      const scrollToIdx =\n        idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx =\n        rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({ idx: scrollToIdx, rowIdx: scrollToRowIdx });\n      }\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow(args: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n\n    if (args.type === 'HEADER') {\n      const newSelectedRows = new Set(selectedRows);\n      for (const row of rows) {\n        const rowKey = rowKeyGetter(row);\n        if (args.checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const { row, checked, isShiftClick } = args;\n    const newSelectedRows = new Set(selectedRows);\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function handleKeyDown(event: KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx, mode } = selectedPosition;\n    if (mode === 'EDIT') return;\n\n    if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown(\n        {\n          mode: 'SELECT',\n          row,\n          column: columns[idx],\n          rowIdx,\n          selectCell\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { keyCode } = event;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event)\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    if (row === rows[rowIdx]) return;\n    const updatedRows = [...rows];\n    updatedRows[rowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rows[rowIdx];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rows[rowIdx];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ type: 'ROW', row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx];\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (isSamePosition(selectedPosition, position)) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(getCellToScroll(gridRef.current!));\n    } else {\n      shouldFocusCellRef.current = true;\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: minRowIdx };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: maxRowIdx };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let cellNavigationMode: CellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n\n    // Do not allow focus to leave and prevent scrolling\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'EDIT' || onFill == null) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = (shouldFocusCell: boolean) => {\n      shouldFocusCellRef.current = shouldFocusCell;\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges: boolean, shouldFocusCell: boolean) => {\n      if (commitChanges) {\n        // Prevents two issues when editor is closed by clicking on a different cell\n        //\n        // Otherwise commitEditorChanges may be called before the cell state is changed to\n        // SELECT and this results in onRowChange getting called twice.\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor(false);\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        onKeyDown={onCellKeyDown}\n        navigate={navigate}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    // idx can be -1 if grouping is enabled\n    const selectedColumn = selectedPosition.idx === -1 ? undefined : columns[selectedPosition.idx];\n    if (\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = selectedIdx === -1 ? undefined : columns[selectedIdx];\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      let key: K | number = rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        renderRow(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex': headerAndTopSummaryRowsCount + rowIdx + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelected,\n          onCellClick: onCellClickLatest,\n          onCellDoubleClick: onCellDoubleClickLatest,\n          onCellContextMenu: onCellContextMenuLatest,\n          rowClass,\n          gridRowStart,\n          height: getRowHeight(rowIdx),\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectCellLatest,\n          selectedCellDragHandle: getDragHandle(rowIdx),\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `${headerRowHeight}px`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused =\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n\n  return (\n    <div\n      role={role}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={ariaRowCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            isRowIdxWithinViewportBounds(selectedPosition.rowIdx) ||\n            scrollToPosition?.rowIdx !== undefined\n              ? `${headerRowHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateColumns,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      <DataGridDefaultRenderersProvider value={defaultGridComponents}>\n        <RowSelectionChangeProvider value={selectRowLatest}>\n          <RowSelectionProvider value={allRowsSelected}>\n            <HeaderRow\n              columns={getRowViewportColumns(minRowIdx)}\n              onColumnResize={handleColumnResizeLatest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChangeLatest}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={\n                selectedPosition.rowIdx === minRowIdx ? selectedPosition.idx : undefined\n              }\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n              direction={direction}\n            />\n          </RowSelectionProvider>\n          {rows.length === 0 && noRowsFallback ? (\n            noRowsFallback\n          ) : (\n            <>\n              {topSummaryRows?.map((row, rowIdx) => {\n                const gridRowStart = headerRowsCount + rowIdx + 1;\n                const summaryRowIdx = rowIdx + minRowIdx + 1;\n                const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                const top = headerRowHeight + summaryRowHeight * rowIdx;\n\n                return (\n                  <SummaryRow\n                    aria-rowindex={gridRowStart}\n                    key={rowIdx}\n                    rowIdx={summaryRowIdx}\n                    gridRowStart={gridRowStart}\n                    row={row}\n                    top={top}\n                    bottom={undefined}\n                    viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                    lastFrozenColumnIndex={lastFrozenColumnIndex}\n                    selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                    isTop\n                    showBorder={rowIdx === topSummaryRowsCount - 1}\n                    selectCell={selectCellLatest}\n                  />\n                );\n              })}\n              {getViewportRows()}\n              {bottomSummaryRows?.map((row, rowIdx) => {\n                const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n                const summaryRowIdx = rows.length + rowIdx;\n                const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                const top =\n                  clientHeight > totalRowHeight\n                    ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                    : undefined;\n                const bottom =\n                  top === undefined\n                    ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                    : undefined;\n\n                return (\n                  <SummaryRow\n                    aria-rowindex={ariaRowCount - bottomSummaryRowsCount + rowIdx + 1}\n                    key={rowIdx}\n                    rowIdx={summaryRowIdx}\n                    gridRowStart={gridRowStart}\n                    row={row}\n                    top={top}\n                    bottom={bottom}\n                    viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                    lastFrozenColumnIndex={lastFrozenColumnIndex}\n                    selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                    isTop={false}\n                    showBorder={rowIdx === 0}\n                    selectCell={selectCellLatest}\n                  />\n                );\n              })}\n            </>\n          )}\n        </RowSelectionChangeProvider>\n      </DataGridDefaultRenderersProvider>\n\n      {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n      {renderMeasuringCells(viewportColumns)}\n\n      {/* extra div is needed for row navigation in a treegrid */}\n      {isTreeGrid && (\n        <div\n          ref={focusSinkRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [focusSinkHeaderAndSummaryClassname]: !isRowIdxWithinViewportBounds(\n              selectedPosition.rowIdx\n            ),\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n          }}\n        />\n      )}\n\n      {scrollToPosition !== null && (\n        <ScrollToCell\n          scrollToPosition={scrollToPosition}\n          setScrollToCellPosition={setScrollToPosition}\n          gridElement={gridRef.current!}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction getCellToScroll(gridEl: HTMLDivElement) {\n  return gridEl.querySelector<HTMLDivElement>(':scope > [role=\"row\"] > [tabindex=\"0\"]');\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { memo } from 'react';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\n\ninterface GroupCellProps<R, SR> {\n  id: string;\n  groupKey: unknown;\n  childRows: readonly R[];\n  toggleGroup: (expandedGroupId: unknown) => void;\n  isExpanded: boolean;\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n  isGroupByColumn: boolean;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  isGroupByColumn,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = isGroupByColumn && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!isGroupByColumn || isLevelMatching) &&\n        column.renderGroupCell?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          tabIndex: childTabIndex,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\nimport type { BaseRenderRowProps, GroupRow } from './types';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport { cell, cellFrozenLast } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nconst groupRow = css`\n  @layer rdg.GroupedRow {\n    &:not([aria-selected='true']) {\n      background-color: var(--rdg-header-background-color);\n    }\n\n    > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n      border-inline-end: none;\n    }\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\ninterface GroupRowRendererProps<R, SR> extends BaseRenderRowProps<R, SR> {\n  row: GroupRow<R>;\n  groupBy: readonly string[];\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nfunction GroupedRow<R, SR>({\n  className,\n  row,\n  rowIdx,\n  viewportColumns,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  gridRowStart,\n  height,\n  groupBy,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? row.level + 1 : row.level;\n\n  function handleSelectGroup() {\n    selectCell({ rowIdx, idx: -1 });\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={row.level + 1} // aria-level is 1-based\n        aria-setsize={row.setSize}\n        aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n        aria-expanded={row.isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          selectedCellIdx === -1 && rowSelectedClassname,\n          className\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={row.id}\n            groupKey={row.groupKey}\n            childRows={row.childRows}\n            isExpanded={row.isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n            isGroupByColumn={groupBy.includes(column.key)}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { forwardRef, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\n\nimport { useLatestFunc } from './hooks';\nimport { assertIsValidKeyGetter, isCtrlKeyHeldDown } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  GroupRow,\n  Maybe,\n  Omit,\n  RenderRowProps,\n  RowHeightArgs,\n  RowsChangeData\n} from './types';\nimport { renderToggleGroup, SELECT_COLUMN_KEY } from '.';\nimport DataGrid from './DataGrid';\nimport type { DataGridHandle, DataGridProps } from './DataGrid';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\nimport GroupedRow from './GroupRow';\nimport { defaultRenderRow } from './Row';\n\nexport interface TreeDataGridProps<R, SR = unknown, K extends Key = Key>\n  extends Omit<DataGridProps<R, SR, K>, 'role' | 'aria-rowcount' | 'rowHeight' | 'onFill'> {\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  groupBy: readonly string[];\n  rowGrouper: (rows: readonly R[], columnKey: string) => Record<string, readonly R[]>;\n  expandedGroupIds: ReadonlySet<unknown>;\n  onExpandedGroupIdsChange: (expandedGroupIds: Set<unknown>) => void;\n}\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\nfunction TreeDataGrid<R, SR, K extends Key>(\n  {\n    columns: rawColumns,\n    rows: rawRows,\n    rowHeight: rawRowHeight,\n    rowKeyGetter: rawRowKeyGetter,\n    onCellKeyDown: rawOnCellKeyDown,\n    onRowsChange,\n    selectedRows: rawSelectedRows,\n    onSelectedRowsChange: rawOnSelectedRowsChange,\n    renderers,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    ...props\n  }: TreeDataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const rawRenderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const headerAndTopSummaryRowsCount = 1 + (props.topSummaryRows?.length ?? 0);\n  const isRtl = props.direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  const { columns, groupBy } = useMemo(() => {\n    const columns = [...rawColumns].sort(({ key: aKey }, { key: bKey }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy.includes(bKey)) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const groupBy: string[] = [];\n    for (const [index, column] of columns.entries()) {\n      if (rawGroupBy.includes(column.key)) {\n        groupBy.push(column.key);\n        columns[index] = {\n          ...column,\n          frozen: true,\n          renderCell: () => null,\n          renderGroupCell: column.renderGroupCell ?? renderToggleGroup,\n          editable: false\n        };\n      }\n    }\n\n    return { columns, groupBy };\n  }, [rawColumns, rawGroupBy]);\n\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds.has(id);\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const rowHeight = useMemo(() => {\n    if (typeof rawRowHeight === 'function') {\n      return (row: R | GroupRow<R>): number => {\n        if (isGroupRow(row)) {\n          return rawRowHeight({ type: 'GROUP', row });\n        }\n        return rawRowHeight({ type: 'ROW', row });\n      };\n    }\n\n    return rawRowHeight;\n  }, [isGroupRow, rawRowHeight]);\n\n  const getParentRowAndIndex = useCallback(\n    (row: R | GroupRow<R>) => {\n      const rowIdx = rows.indexOf(row);\n      for (let i = rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && (!isGroupRow(row) || row.parentId === parentRow.id)) {\n          return [parentRow, i] as const;\n        }\n      }\n\n      return undefined;\n    },\n    [isGroupRow, rows]\n  );\n\n  const rowKeyGetter = useCallback(\n    (row: R | GroupRow<R>) => {\n      if (isGroupRow(row)) {\n        return row.id;\n      }\n\n      if (typeof rawRowKeyGetter === 'function') {\n        return rawRowKeyGetter(row);\n      }\n\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        const { startRowIndex, childRows } = parentRowAndIndex[0];\n        const groupIndex = childRows.indexOf(row);\n        return startRowIndex + groupIndex + 1;\n      }\n\n      return rows.indexOf(row);\n    },\n    [getParentRowAndIndex, isGroupRow, rawRowKeyGetter, rows]\n  );\n\n  const selectedRows = useMemo((): Maybe<ReadonlySet<Key>> => {\n    if (rawSelectedRows == null) return null;\n\n    assertIsValidKeyGetter<R, K>(rawRowKeyGetter);\n\n    const selectedRows = new Set<Key>(rawSelectedRows);\n    for (const row of rows) {\n      if (isGroupRow(row)) {\n        // select parent row if all the children are selected\n        const isGroupRowSelected = row.childRows.every((cr) =>\n          rawSelectedRows.has(rawRowKeyGetter(cr))\n        );\n        if (isGroupRowSelected) {\n          selectedRows.add(row.id);\n        }\n      }\n    }\n\n    return selectedRows;\n  }, [isGroupRow, rawRowKeyGetter, rawSelectedRows, rows]);\n\n  function onSelectedRowsChange(newSelectedRows: Set<Key>) {\n    if (!rawOnSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rawRowKeyGetter);\n\n    const newRawSelectedRows = new Set(rawSelectedRows);\n    for (const row of rows) {\n      const key = rowKeyGetter(row);\n      if (selectedRows?.has(key) && !newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          // select all children if the parent row is selected\n          for (const cr of row.childRows) {\n            newRawSelectedRows.delete(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.delete(key as K);\n        }\n      } else if (!selectedRows?.has(key) && newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          // unselect all children if the parent row is unselected\n          for (const cr of row.childRows) {\n            newRawSelectedRows.add(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.add(key as K);\n        }\n      }\n    }\n\n    rawOnSelectedRowsChange(newRawSelectedRows);\n  }\n\n  function handleKeyDown(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) {\n    rawOnCellKeyDown?.(args, event);\n    if (event.isGridDefaultPrevented()) return;\n\n    if (args.mode === 'EDIT') return;\n    const { column, rowIdx, selectCell } = args;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const idx = column?.idx ?? -1;\n    const row = rows[rowIdx];\n\n    if (!isGroupRow(row)) return;\n    if (\n      idx === -1 &&\n      // Collapse the current group row if it is focused and is in expanded state\n      ((event.key === leftKey && row.isExpanded) ||\n        // Expand the current group row if it is focused and is in collapsed state\n        (event.key === rightKey && !row.isExpanded))\n    ) {\n      event.preventDefault(); // Prevents scrolling\n      event.preventGridDefault();\n      toggleGroup(row.id);\n    }\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (idx === -1 && event.key === leftKey && !row.isExpanded && row.level !== 0) {\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        event.preventGridDefault();\n        selectCell({ idx, rowIdx: parentRowAndIndex[1] });\n      }\n    }\n\n    // Prevent copy/paste on group rows\n    if (isCtrlKeyHeldDown(event) && (event.keyCode === 67 || event.keyCode === 86)) {\n      event.preventGridDefault();\n    }\n  }\n\n  function handleRowsChange(updatedRows: R[], { indexes, column }: RowsChangeData<R, SR>) {\n    if (!onRowsChange) return;\n    const updatedRawRows = [...rawRows];\n    const rawIndexes: number[] = [];\n    indexes.forEach((index) => {\n      const rawIndex = rawRows.indexOf(rows[index] as R);\n      updatedRawRows[rawIndex] = updatedRows[index];\n      rawIndexes.push(rawIndex);\n    });\n    onRowsChange(updatedRawRows, {\n      indexes: rawIndexes,\n      column\n    });\n  }\n\n  function toggleGroup(groupId: unknown) {\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(groupId)) {\n      newExpandedGroupIds.delete(groupId);\n    } else {\n      newExpandedGroupIds.add(groupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function renderRow(\n    key: Key,\n    {\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor,\n      selectedCellDragHandle,\n      ...rowProps\n    }: RenderRowProps<R, SR>\n  ) {\n    if (isGroupRow(row)) {\n      const { startRowIndex } = row;\n      return (\n        <GroupedRow\n          key={key}\n          {...rowProps}\n          aria-rowindex={headerAndTopSummaryRowsCount + startRowIndex + 1}\n          row={row}\n          groupBy={groupBy}\n          toggleGroup={toggleGroupLatest}\n        />\n      );\n    }\n\n    let ariaRowIndex = rowProps['aria-rowindex'];\n    const parentRowAndIndex = getParentRowAndIndex(row);\n    if (parentRowAndIndex !== undefined) {\n      const { startRowIndex, childRows } = parentRowAndIndex[0];\n      const groupIndex = childRows.indexOf(row);\n      ariaRowIndex = startRowIndex + headerAndTopSummaryRowsCount + groupIndex + 2;\n    }\n\n    return rawRenderRow(key, {\n      ...rowProps,\n      'aria-rowindex': ariaRowIndex,\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor,\n      selectedCellDragHandle\n    });\n  }\n\n  return (\n    <DataGrid<R, SR, Key>\n      {...props}\n      role=\"treegrid\"\n      aria-rowcount={\n        rowsCount + 1 + (props.topSummaryRows?.length ?? 0) + (props.bottomSummaryRows?.length ?? 0)\n      }\n      ref={ref}\n      columns={columns}\n      rows={rows as R[]} // TODO: check types\n      rowHeight={rowHeight}\n      rowKeyGetter={rowKeyGetter}\n      onRowsChange={handleRowsChange}\n      selectedRows={selectedRows}\n      onSelectedRowsChange={onSelectedRowsChange}\n      onCellKeyDown={handleKeyDown}\n      renderers={{\n        ...renderers,\n        renderRow\n      }}\n    />\n  );\n}\n\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport default forwardRef(TreeDataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: TreeDataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\n\nimport type { RenderEditCellProps } from '../types';\n\nconst textEditorInternalClassname = css`\n  @layer rdg.TextEditor {\n    appearance: none;\n\n    box-sizing: border-box;\n    inline-size: 100%;\n    block-size: 100%;\n    padding-block: 0;\n    padding-inline: 6px;\n    border: 2px solid #ccc;\n    vertical-align: top;\n    color: var(--rdg-color);\n    background-color: var(--rdg-background-color);\n\n    font-family: inherit;\n    font-size: var(--rdg-font-size);\n\n    &:focus {\n      border-color: var(--rdg-selection-color);\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #999;\n      opacity: 1;\n    }\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: RenderEditCellProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true, false)}\n    />\n  );\n}\n"],"names":["getColSpan","column","lastFrozenColumnIndex","args","colSpan","Number","isInteger","frozen","idx","undefined","scrollIntoView","element","inline","block","createCellEvent","event","defaultPrevented","cellEvent","preventGridDefault","isGridDefaultPrevented","Object","setPrototypeOf","getPrototypeOf","nonInputKeys","Set","isCtrlKeyHeldDown","e","ctrlKey","metaKey","key","isDefaultCellInput","has","onEditorNavigation","target","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","closest","querySelectorAll","length","measuringCellClassname","renderMeasuringCells","viewportColumns","map","minWidth","maxWidth","_jsx","className","style","gridColumnStart","isSelectedCellEditable","selectedPosition","columns","rows","row","rowIdx","isCellEditable","renderEditCell","editable","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","topSummaryRowsCount","minRowIdx","type","getNextSelectedCellPosition","cellNavigationMode","colSpanColumns","maxRowIdx","currentPosition","currentIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","setColSpan","moveRight","colIdx","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","maxColIdx","shiftKey","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","cell","cellClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","getRowStyle","height","getCellStyle","gridColumnEnd","insetInlineStart","getCellClassname","extraClasses","clsx","isLastFrozenColumn","min","max","round","floor","sign","abs","Math","assertIsValidKeyGetter","keyGetter","Error","clampColumnWidth","width","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","renderCheckbox","onChange","props","handleChange","checked","nativeEvent","_jsxs","disabled","children","groupCellContent","groupCellContentClassname","caret","caretClassname","renderToggleGroup","ToggleGroup","groupKey","isExpanded","tabIndex","toggleGroup","handleKeyDown","d","onKeyDown","viewBox","renderValue","DataGridDefaultRenderersContext","createContext","DataGridDefaultRenderersProvider","Provider","useDefaultRenderers","useContext","SelectCellFormatter","value","ariaLabel","ariaLabelledBy","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","SELECT_COLUMN_KEY","HeaderRenderer","isRowSelected","onRowSelectionChange","SelectFormatter","isShiftClick","SelectGroupFormatter","SelectColumn","name","resizable","sortable","renderHeaderCell","renderCell","renderGroupCell","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","rawColumns","measuredColumnWidths","resizedColumnWidths","viewportWidth","scrollLeft","defaultColumnOptions","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultFormatter","defaultSortable","defaultResizable","useMemo","rawColumn","sort","aKey","frozenA","bKey","frozenB","forEach","push","templateColumns","layoutCssVars","totalFrozenColumnWidth","columnMetrics","Map","left","get","set","columnMetric","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useColumnWidths","gridRef","gridWidth","setResizedColumnWidths","setMeasuredColumnWidths","onColumnResize","prevGridWidthRef","useRef","columnsCanFlex","ignorePreviouslyMeasuredColumns","current","newTemplateColumns","columnsToMeasure","gridTemplateColumns","join","updateMeasuredWidths","newMeasuredColumnWidths","hasChanges","measuredWidth","measureColumnWidth","delete","handleColumnResize","nextWidth","resizingKey","flushSync","newResizedColumnWidths","selector","CSS","escape","measuringCell","querySelector","getBoundingClientRect","useGridDimensions","inlineSize","setInlineSize","useState","blockSize","setBlockSize","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","initialWidth","initialHeight","resizeObserver","entries","size","contentBoxSize","observe","disconnect","useLatestFunc","fn","ref","callbackFn","useCallback","useRovingTabIndex","isSelected","isChildFocused","setIsChildFocused","onFocus","currentTarget","isFocusable","childTabIndex","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","useViewportRows","rowHeight","scrollTop","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","cellDragHandle","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","setDraggedOverRowIdx","handleMouseDown","buttons","addEventListener","onMouseOver","onMouseUp","removeEventListener","handleDragEnd","overRowIdx","startRowIndex","endRowIndex","updateRows","handleDoubleClick","stopPropagation","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","columnKey","targetRow","onMouseDown","onDoubleClick","cellEditing","EditCell","onRowChange","closeEditor","navigate","frameRequestRef","commitOnOutsideClick","editorOptions","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","mode","commitChanges","shouldFocusCell","onEditorRowChange","commitChangesAndFocus","cellClass","displayCellContent","role","onMouseDownCapture","_Fragment","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","sortDirection","priority","onSort","SortableHeaderCell","renderSortStatus","preventDefault","handleClick","onClick","cellResizable","cellResizableClassname","HeaderCell","isCellSelected","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","direction","isRtl","sortIndex","findIndex","sortColumn","ariaSort","headerCellClass","defaultRenderHeaderCell","onPointerDown","pointerType","pointerId","right","clientX","onPointerMove","onLostPointerCapture","setPointerCapture","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","handleFocus","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","headerRow","headerRowClassname","HeaderRow","selectedCellIdx","cells","index","memo","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","dragHandle","onContextMenu","isEditable","selectCellWrapper","openEditor","handleContextMenu","handleRowChange","newRow","Row","gridRowStart","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","selectedCellDragHandle","onCellClick","onCellDoubleClick","onCellContextMenu","rowClass","onMouseEnter","handleDragEnter","RowComponent","forwardRef","defaultRenderRow","ScrollToCell","scrollToPosition","gridElement","setScrollToCellPosition","removeScrollToCell","observer","IntersectionObserver","root","threshold","gridColumn","gridRow","arrow","arrowClassname","renderSortIcon","renderSortPriority","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","focusSinkHeaderAndSummaryClassname","summaryCellClassname","SummaryCell","summaryCellClass","renderSummaryCell","summaryRow","topSummaryRow","topSummaryRowBorderClassname","bottomSummaryRowBorderClassname","summaryRowClassname","topSummaryRowClassname","SummaryRow","bottom","isTop","showBorder","ariaRowIndex","DataGrid","rowKeyGetter","rawRowHeight","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onCellKeyDown","onScroll","onCopy","onPaste","rawEnableVirtualization","renderers","rawDirection","rawRole","ariaDescribedBy","rawAriaRowCount","testId","defaultRenderers","renderRow","defaultRenderSortStatus","defaultRenderCheckbox","noRowsFallback","headerRowsCount","bottomSummaryRowsCount","summaryRowsCount","headerAndTopSummaryRowsCount","setScrollTop","setScrollLeft","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","setScrollToPosition","prevSelectedPosition","lastSelectedRowIdx","focusSinkRef","shouldFocusCellRef","isTreeGrid","gridHeight","isSelectable","leftKey","rightKey","ariaRowCount","defaultGridComponents","allRowsSelected","every","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","handleColumnResizeLatest","onSortColumnsChangeLatest","onCellClickLatest","onCellDoubleClickLatest","onCellContextMenuLatest","selectRowLatest","selectRow","handleFormatterRowChangeLatest","updateRow","selectCellLatest","selectHeaderCellLatest","isSamePosition","focus","preventScroll","getCellToScroll","elementToFocus","useImperativeHandle","scrollToCell","scrollToIdx","scrollToRowIdx","isRowIdxWithinViewportBounds","newSelectedRows","rowKey","add","previousRowIdx","indexOf","step","Element","isCellEvent","isRowEvent","keyCode","cKey","vKey","handleCopy","handlePaste","handleCellInput","handleScroll","commitEditorChanges","sourceColumnKey","targetColumn","updatedTargetRow","targetColumnKey","originalRow","isColIdxWithinSelectionBounds","enableEditor","getNextPosition","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","currentRowIdx","getDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","includes","slice","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","c","templateRows","isGroupRowFocused","scrollPaddingInlineStart","scrollPaddingBlock","dir","summaryRowIdx","isSummaryRowSelected","gridEl","p1","p2","GroupCell","id","childRows","groupColumnIndex","isGroupByColumn","toggleGroupWrapper","isLevelMatching","cursor","groupRow","groupRowClassname","GroupedRow","groupBy","level","handleSelectGroup","setSize","posInSet","TreeDataGrid","rawRows","rawRowKeyGetter","rawOnCellKeyDown","rawSelectedRows","rawOnSelectedRowsChange","rawGroupBy","rowGrouper","expandedGroupIds","onExpandedGroupIdsChange","rawRenderRow","toggleGroupLatest","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","groupRowsCount","groups","childGroups","childRowsCount","isGroupRow","allGroupRows","flattenedRows","expandGroup","parentId","isReadonlyArray","keys","getParentRowAndIndex","parentRow","parentRowAndIndex","groupIndex","isGroupRowSelected","cr","newRawSelectedRows","handleRowsChange","updatedRawRows","rawIndexes","rawIndex","groupId","newExpandedGroupIds","rowProps","arr","Array","isArray","textEditorInternalClassname","textEditorClassname","autoFocusAndSelect","input","select","textEditor","onBlur"],"mappings":"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"}